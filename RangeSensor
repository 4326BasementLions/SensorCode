package org.firstinspires.ftc.teamcode;


import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;

import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cRangeSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;



/**
 * { illustrates how to use the Modern Robotics
 * Range Sensor.
 *
 * The op mode assumes that the range sensor is configured with a name of "sensor_range".
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 *
 * @see <a href="http://modernroboticsinc.com/range-sensor">MR Range Sensor</a>
 */
@Autonomous(name = "Sensor: MR range sensor", group = "Sensor")
//@Disabled   // comment out or remove this line to enable this opmode
public class Range extends LinearOpMode {

    ModernRoboticsI2cRangeSensor rangeSensor;

    DcMotor leftBack;
    DcMotor leftFront;
    DcMotor rightFront;
    DcMotor rightBack;


    @Override public void runOpMode() {

        // get a reference to our compass
        rangeSensor = hardwareMap.get(ModernRoboticsI2cRangeSensor.class, "sensor_range");

        // wait for the start button to be pressed
        waitForStart();

        while (opModeIsActive()) {
            telemetry.addData("raw ultrasonic", rangeSensor.rawUltrasonic()); //Measures distance when far away, higher number is father away
            telemetry.addData("raw optical", rangeSensor.rawOptical()); //Measures distance when closer; higher number when closer
            telemetry.addData("c optical", "%.2f cm", rangeSensor.cmOptical());
            telemetry.addData("cm", "%.2f cm", rangeSensor.getDistance(DistanceUnit.CM));
            telemetry.update();
            leftFront = hardwareMap.dcMotor.get("leftFront");
            int x = 0;
         while(x < 7) {
             Sense();
             x++;
         }
        }}


    public void MoveForward(int one){
        leftFront.setPower(one);


    }
    public void Sense(){
        if(rangeSensor.rawUltrasonic()>20){
            MoveForward(10);
        }
        if(rangeSensor.rawUltrasonic()<20&&rangeSensor.rawUltrasonic()>5){
            MoveForward(5);
        }
        if(rangeSensor.rawOptical()<=5){
            MoveForward(0);
        }
    }
}

